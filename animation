class RotateTransitionAnimator: NSObject,

let duration = 0.5
    var isPresenting = false
    func transitionDuration(transitionContext:
UIViewControllerContextTransitioning?) -> NSTimeInterval {
        return duration
    }
    func animateTransition(transitionContext:
UIViewControllerContextTransitioning) {
        // Get reference to our fromView, toView and the container view
        let fromView =
transitionContext.viewForKey(UITransitionContextFromViewKey)!
        let toView =
transitionContext.viewForKey(UITransitionContextToViewKey)!
        // Set up the transform we'll use in the animation
        guard let container = transitionContext.containerView() else {
            return
}
        // Set up the transform for rotation
        // The angle is in radian. To convert from degree to radian, use this
formula
180)
// radian = angle * pi / 180
let rotateOut = CGAffineTransformMakeRotation(-90 * CGFloat(M_PI) /
// Change the anchor point and position
toView.layer.anchorPoint = CGPoint(x:0, y:0)
fromView.layer.anchorPoint = CGPoint(x:0, y:0)
toView.layer.position = CGPoint(x:0, y:0)
fromView.layer.position = CGPoint(x:0, y:0)
// Change the initial position of the toView
toView.transform = rotateOut
// Add both views to the container view
container.addSubview(toView)
container.addSubview(fromView)
// Perform the animation
        UIView.animateWithDuration(duration, delay: 0.0,
usingSpringWithDamping: 0.8, initialSpringVelocity: 0.8, options: [],
animations
